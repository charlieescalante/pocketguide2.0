import streamlit as st
from geopy.geocoders import Nominatim
from openai import OpenAI
from streamlit_geolocation import streamlit_geolocation

# Initialize services
geolocator = Nominatim(user_agent=st.secrets["USER_AGENT"], timeout=10)
client = OpenAI(api_key=st.secrets['OPENAI_API_Key'])

# App title and intro
st.title("PocketGuide with Reverse Geocoding")
st.info(
    "**Note**: The content presented here is generated by AI, and any spoken narration uses an AI-generated voice."
)

# Initialize session states
if "tour_started" not in st.session_state:
    st.session_state.tour_started = False

if "messages" not in st.session_state:
    st.session_state.messages = [
        {
            "role": "system",
            "content": (
                "You are a tour guide. You give insights into people's surroundings "
                "using their address. It will be a 1-sided tour; you won't receive questions "
                "from the user. You will simply speak about the area as though you've lived "
                "there your whole life, providing rich detail and history."
            ),
        }
    ]

# Create a "Start Tour" button
if st.button("Start Tour"):
    st.session_state.tour_started = True

# If user clicked on "Start Tour", retrieve location and process
if st.session_state.tour_started:
    location = streamlit_geolocation()

    if location:
        st.success("Geolocation Retrieved Successfully!")
        lat = location["latitude"]
        lon = location["longitude"]

        st.write(f"**Latitude:** {lat}")
        st.write(f"**Longitude:** {lon}")

        # Reverse Geocode to get the address
        try:
            reverse_location = geolocator.reverse(f"{lat}, {lon}")
            if reverse_location:
                address = reverse_location.raw['display_name']
                # Display the resolved address
                st.write(f"**Resolved Address:** {address}")
            else:
                address = None
                st.warning("No address found for the given coordinates.")
        except Exception as e:
            address = None
            st.error(f"Error during reverse geocoding: {e}")

        # Send only the address to OpenAI if resolved
        if address:
            user_message = f"I am currently at: {address}."
            st.session_state.messages.append({"role": "user", "content": user_message})

            # Call OpenAI API with the address
            with st.spinner("Generating your tour guide narration..."):
                try:
                    chatresponse = client.chat.completions.create(
                        model='chatgpt-4o-latest',
                        messages=st.session_state.messages,
                        temperature=1,
                        n=1,
                    )
                    tour_guide_text = chatresponse.choices[0].message.content
                    st.session_state.messages.append({"role": "assistant", "content": tour_guide_text})
                    st.write("---")
                    st.markdown("#### Your PocketGuide says:")
                    st.write(tour_guide_text)
                except Exception as e:
                    st.error(f"Error during AI processing: {e}")
        else:
            st.warning("Address could not be resolved. Unable to provide insights.")
    else:
        st.warning("Click the button to fetch your geolocation.")
